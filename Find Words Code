#include <iostream>
#include <vector>
#include <string>
#include <algorithm> 

using namespace std;

string toLower(string str) {
    transform(str.begin(), str.end(), str.begin(), ::tolower);
    return str;
}

bool searchHorizontal(vector<string>& matrix, string& word) {
    word = toLower(word); 
    int rows = matrix.size();
    int cols = matrix[0].size();

    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j <= cols - word.length(); ++j) {
            bool found = true;
            for (int k = 0; k < word.length(); ++k) {
                if (tolower(matrix[i][j + k]) != word[k]) { 
                    found = false;
                    break;
                }
            }
            if (found) return true;
        }
    }
    return false;
}

bool searchVertical(vector<string>& matrix, string& word) {
    word = toLower(word); 
    int rows = matrix.size();
    int cols = matrix[0].size();

    for (int i = 0; i <= rows - word.length(); ++i) {
        for (int j = 0; j < cols; ++j) {
            bool found = true;
            for (int k = 0; k < word.length(); ++k) {
                if (tolower(matrix[i + k][j]) != word[k]) { 
                    found = false;
                    break;
                }
            }
            if (found) return true;
        }
    }
    return false;
}

bool searchDiagonal1(vector<string>& matrix, string& word) {
    word = toLower(word); 
    int rows = matrix.size();
    int cols = matrix[0].size();

    for (int i = 0; i <= rows - word.length(); ++i) {
        for (int j = 0; j <= cols - word.length(); ++j) {
            bool found = true;
            for (int k = 0; k < word.length(); ++k) {
                if (tolower(matrix[i + k][j + k]) != word[k]) { 
                    found = false;
                    break;
                }
            }
            if (found) return true;
        }
    }
    return false;
}

bool searchDiagonal2(vector<string>& matrix, string& word) {
    word = toLower(word); 
    int rows = matrix.size();
    int cols = matrix[0].size();

    for (int i = word.length() - 1; i < rows; ++i) {
        for (int j = 0; j <= cols - word.length(); ++j) {
            bool found = true;
            for (int k = 0; k < word.length(); ++k) {
                if (tolower(matrix[i - k][j + k]) != word[k]) { 
                    found = false;
                    break;
                }
            }
            if (found) return true;
        }
    }
    return false;
}


int main() {
    int n;
    cin >> n;

    vector<string> words(n);
    for (int i = 0; i < n; ++i) {
        cin >> words[i];
    }

    vector<string> matrix = {
        "AAFLKHPFSSUFICICLESGNNH",
        "SFVREOMRWLRTTSXOOONAOAO",
        "QEIAIFXAEIRFVFYSXIMINJI",
        "WSTRLGOCAPBIAFIWIWTUACM",
        "FEYAEAISTPCRLUJKOAKCERS", 
        "RVDAKPNDEEHDEMSNCKKFOAH", 
        "MRNEDSLCRRIWNRSAAFITMMI", 
        "YAAECIEAHYMOTAVHRSSTISB", 
        "RJSEWELCCENNIETOHWSGLSE", 
        "ATANYYMOIEESNESIOIRELTR", 
        "UTENEWEBHMYBETNNRAIEBEN", 
        "RCLKUTEAEQJLSGSHTGDSKOA", 
        "BHOICATNRRSDDECEHOOLGIT", 
        "ENSLUARIRSETALOCOHCTOHE",
        "FZFUDQJYMADOYIWYGLOVESU", 
        "TEKALFWONSNAEBMIEJTINTG", 
        "ESWPOSJXEUTUYOZUWAKEZHM", 
        "KZUHBPEZEERFLMSNOWBALLH", 
        "NSNOWBOARDYTVWYCLEVOHSA", 
        "ACOCROLGZIYCHODRAZZILBI", 
        "LBVKKWANZAAOQINWOLPWONS", 
        "BFREEZINGRAINSLILGTMELT", 
        "HQPYLWHFMNFFUFPSWXNUMMY"
    };

    for (int i = 0; i < n; ++i) {
        if (searchHorizontal(matrix, words[i]) || searchVertical(matrix, words[i]) ||
            searchDiagonal1(matrix, words[i]) || searchDiagonal2(matrix, words[i])) {
            cout << "Ada" << endl;
        } else {
            cout << "Tidak Ada" << endl;
        }
    }

    return 0;
}
